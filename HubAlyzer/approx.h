#pragma once

// == 1 / log2(10)
#define ONE_OVER_LOG2_10 0.3010299956639812f

// compute log2(x) by reducing x to [0.75, 1.5), then divide by log2(10)
// See: https://tech.ebayinc.com/engineering/fast-approximate-logarithms-part-iii-the-formulas/
// This version uses only multiplies
float log10f_fast(float x)
{
    constexpr float a = 0.338531;
    constexpr float b = -0.741619;
    constexpr float c = 1.445866;
#define FNM fexp + (((a * signif) + b) * signif + c) * signif

    float signif, fexp;
    int exp;
    float lg2;
    union {
        float f;
        unsigned int i;
    } ux1, ux2;
    int greater; // really a boolean
    /* 
     * Assume IEEE representation, which is sgn(1):exp(8):frac(23)
     * representing (1+frac)*2^(exp-127).  Call 1+frac the significand
     */

    // get exponent
    ux1.f = x;
    exp = (ux1.i & 0x7F800000) >> 23;
    // actual exponent is exp-127, will subtract 127 later

    greater = ux1.i & 0x00400000; // true if signif > 1.5
    if (greater)
    {
        // signif >= 1.5 so need to divide by 2.  Accomplish this by
        // stuffing exp = 126 which corresponds to an exponent of -1
        ux2.i = (ux1.i & 0x007FFFFF) | 0x3f000000;
        signif = ux2.f;
        fexp = exp - 126; // 126 instead of 127 compensates for division by 2
        signif = signif - 1.0;
        lg2 = FNM;
    }
    else
    {
        // get signif by stuffing exp = 127 which corresponds to an exponent of 0
        ux2.i = (ux1.i & 0x007FFFFF) | 0x3f800000;
        signif = ux2.f;
        fexp = exp - 127;
        signif = signif - 1.0;
        lg2 = FNM;
    }
    // last two lines of each branch are common code, but optimize better
    // when duplicated, at least when using gcc
    return lg2 * ONE_OVER_LOG2_10;
}

// Compute sin(x) and cos(x) with x in radians
std::pair<float, float> sincosf_fast(float x)
{
    // 256 sine values + 64 for cosine + one value added to front and back for safe interpolation
    static const float sintab[1+256+64+1] = {
      -0.0098480936, 0, 0.0246181448, 0.0492213673, 0.0737947547, 0.0983234116, 0.1227924704, 0.1471870991, 0.1714925112, 0.1956939739, 0.2197768177, 0.2437264449, 
      0.2675283385, 0.2911680713, 0.3146313139, 0.3379038444, 0.3609715563, 0.383820467, 0.4064367269, 0.4288066273, 0.4509166088, 0.4727532694, 
      0.494303373, 0.5155538572, 0.536491841, 0.557104633, 0.5773797389, 0.597304869, 0.6168679458, 0.6360571113, 0.6548607339, 0.6732674161, 
      0.6912660007, 0.7088455779, 0.7259954919, 0.7427053475, 0.758965016, 0.7747646418, 0.7900946479, 0.8049457422, 0.8193089227, 0.8331754833, 
      0.8465370188, 0.8593854302, 0.8717129295, 0.8835120444, 0.8947756231, 0.905496838, 0.9156691907, 0.9252865151, 0.9343429819, 0.9428331014, 
      0.9507517274, 0.9580940601, 0.964855649, 0.9710323955, 0.9766205557, 0.9816167423, 0.986017927, 0.9898214419, 0.9930249816, 0.9956266042, 
      0.9976247329, 0.9990181564, 0.9998060301, 0.9999878765, 0.9995635854, 0.9985334139, 0.9968979864, 0.9946582943, 0.9918156952, 0.988371912, 
      0.9843290322, 0.9796895064, 0.9744561468, 0.9686321256, 0.9622209729, 0.9552265749, 0.9476531712, 0.9395053523, 0.9307880571, 0.9215065694, 
      0.9116665152, 0.901273859, 0.8903349003, 0.8788562695, 0.8668449246, 0.854308146, 0.8412535328, 0.8276889982, 0.813622764, 0.7990633566, 
      0.784019601, 0.7685006159, 0.752515808, 0.7360748666, 0.7191877571, 0.7018647156, 0.6841162424, 0.6659530956, 0.6473862848, 0.628427064, 
      0.6090869254, 0.5893775919, 0.5693110101, 0.5488993434, 0.5281549641, 0.5070904464, 0.4857185584, 0.4640522545, 0.4421046678, 0.4198891016, 
      0.3974190217, 0.3747080483, 0.3517699475, 0.3286186232, 0.3052681084, 0.2817325568, 0.2580262346, 0.234163511, 0.2101588504, 0.1860268031, 
      0.1617819966, 0.1374391267, 0.1130129488, 0.0885182687, 0.0639699338, 0.0393828237, 0.014771842, -0.0098480936, -0.0344620599, -0.0590551371, 
      -0.0836124184, -0.1081190184, -0.1325600827, -0.1569207963, -0.1811863932, -0.2053421648, -0.2293734694, -0.2532657404, -0.2770044957, -0.3005753461, 
      -0.3239640042, -0.3471562933, -0.3701381553, -0.39289566, -0.415415013, -0.4376825643, -0.4596848165, -0.4814084331, -0.5028402465, -0.5239672658, 
      -0.544776685, -0.5652558906, -0.5853924692, -0.6051742152, -0.6245891379, -0.6436254691, -0.6622716699, -0.6805164382, -0.6983487149, -0.7157576911, 
      -0.7327328144, -0.7492637955, -0.7653406141, -0.7809535254, -0.7960930657, -0.8107500583, -0.8249156188, -0.8385811609, -0.8517384014, -0.8643793649, 
      -0.8764963893, -0.8880821299, -0.899129564, -0.9096319954, -0.9195830579, -0.9289767198, -0.9378072873, -0.9460694076, -0.9537580728, -0.9608686223, 
      -0.9673967463, -0.9733384876, -0.9786902448, -0.9834487739, -0.9876111905, -0.9911749717, -0.9941379572, -0.996498351, -0.9982547224, -0.9994060068, 
      -0.9999515064, -0.9998908904, -0.9992241957, -0.9979518263, -0.9960745535, -0.9935935152, -0.9905102152, -0.9868265225, -0.98254467, -0.977667253, 
      -0.972197228, -0.9661379106, -0.9594929736, -0.9522664449, -0.9444627047, -0.9360864832, -0.9271428577, -0.9176372492, -0.9075754197, -0.8969634679, 
      -0.8858078263, -0.8741152567, -0.8618928467, -0.8491480047, -0.835888456, -0.8221222377, -0.8078576943, -0.793103472, -0.7778685141, -0.7621620551, 
      -0.7459936155, -0.7293729957, -0.7123102702, -0.6948157814, -0.6769001336, -0.6585741862, -0.6398490474, -0.6207360673, -0.6012468313, -0.5813931526, 
      -0.5611870654, -0.5406408175, -0.5197668629, -0.4985778543, -0.4770866352, -0.4553062325, -0.4332498483, -0.4109308519, -0.3883627718, -0.3655592877, 
      -0.3425342216, -0.3193015301, -0.2958752957, -0.272269718, -0.2484991053, -0.2245778662, -0.2005205004, -0.17634159, -0.1520557912, -0.1276778244, 
      -0.1032224665, -0.0787045407, -0.0541389086, -0.0295404605, -0.0049241065, 0.0196952321, 0.0443026326, 0.0688831793, 0.0934219728, 0.117904139, 
      0.1423148383, 0.1666392741, 0.1908627024, 0.2149704402, 0.2389478748, 0.2627804724, 0.2864537869, 0.3099534689, 0.3332652742, 0.3563750724, 
      0.3792688557, 0.4019327471, 0.4243530091, 0.4465160516, 0.4684084407, 0.4900169064, 0.5113283509, 0.5323298562, 0.5530086926, 0.5733523255, 
      0.5933484239, 0.6129848671, 0.6322497527, 0.6511314033, 0.669618374, 0.6876994589, 0.7053636982, 0.7226003849, 0.7393990711, 0.7557495744, 
      0.7716419838, 0.7870666664, 0.8020142726, 0.8164757419, 0.8304423086, 0.8439055069, 0.8568571762, 0.8692894658, 0.8811948401, 0.8925660827, 
      0.9033963008, 0.9136789299, 0.9234077372, 0.9325768256, 0.9411806372, 0.9492139571, 0.9566719157, 0.9635499925, 0.9698440184, 0.9755501783, 
      0.9806650134, 0.9851854235, 0.9891086684, 0.9924323701, 0.995154514, 0.9972734501, 0.9987878939, 0.9996969275, 1, 0.9996969275
      };
      // wrap x within [0, 2*PI) first and bring in range [0, 1)
      constexpr float ONE_OVER_PI_2 = 1.0f / (2.0f * 3.1415926535f);
      auto y = x * ONE_OVER_PI_2;
      y = y - floor(y);
      // bring into range [0,255)
      y = y * 255;
      // get index into table
      int i = static_cast<int>(floor(y));
      // get distance from left and right value
      auto d0 = y - floor(y);
      auto d1 = 1.0f - d0;
      auto s = d0 * sintab[i] + d1 * sintab[i + 1];
      auto c = d0 * sintab[i + 64] + d1 * sintab[i + 65];
      return std::make_pair(s, c);
}
